{
  "stats": {
    "suites": 4,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-19T23:11:19.525Z",
    "end": "2023-02-19T23:11:19.537Z",
    "duration": 12,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "32c9b68b-dfaa-451f-9834-15a8ba604812",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "20eb7c94-2c12-413b-b1a3-55153b0c8fff",
          "title": "getChargeDifferential",
          "fullFile": "/Users/gshahin/Documents/BUS/New/mocha-chai-test/test/chargeDiff.spec.js",
          "file": "/test/chargeDiff.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the charge differential between two charges",
              "fullTitle": "getChargeDifferential should return the charge differential between two charges",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let charge1 = 50;\nlet charge2 = 20;\nlet expectedResult = 30;\nassert.equal(getChargeDifferential(charge1, charge2), expectedResult);",
              "err": {},
              "uuid": "3882ea70-d0ef-421a-ae03-fb4541d52f47",
              "parentUUID": "20eb7c94-2c12-413b-b1a3-55153b0c8fff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 if the two charges are equal",
              "fullTitle": "getChargeDifferential should return 0 if the two charges are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let charge1 = 42;\nlet charge2 = 42;\nlet expectedResult = 0;\nassert.equal(getChargeDifferential(charge1, charge2), expectedResult);",
              "err": {},
              "uuid": "0b65355f-bab5-4209-ab75-0fe8871e4ecc",
              "parentUUID": "20eb7c94-2c12-413b-b1a3-55153b0c8fff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the charge differential for 25 and 30 kWh",
              "fullTitle": "getChargeDifferential should return the charge differential for 25 and 30 kWh",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chargeDifferential = getChargeDifferential(25, 30);\nexpect(chargeDifferential).equal(5);",
              "err": {},
              "uuid": "ec4b9b50-b503-416f-976d-d508a46ac257",
              "parentUUID": "20eb7c94-2c12-413b-b1a3-55153b0c8fff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 on same entry",
              "fullTitle": "getChargeDifferential should return 0 on same entry",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chargeDifferential = getChargeDifferential(0, 0);\nexpect(chargeDifferential).equal(0);",
              "err": {},
              "uuid": "665d1b9c-2b9a-4ff8-a165-b483a4cd0cd3",
              "parentUUID": "20eb7c94-2c12-413b-b1a3-55153b0c8fff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify that the charge differential method correctly handles negative values for charges.",
              "fullTitle": "getChargeDifferential should verify that the charge differential method correctly handles negative values for charges.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chargeDifferential = getChargeDifferential(-90, -120);\nexpect(chargeDifferential).equal(30);",
              "err": {},
              "uuid": "17caa0f4-934e-4b1e-b4c3-9700d129d111",
              "parentUUID": "20eb7c94-2c12-413b-b1a3-55153b0c8fff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify that the charge differential method correctly handles decimal values for charges.",
              "fullTitle": "getChargeDifferential should verify that the charge differential method correctly handles decimal values for charges.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chargeDifferential = getChargeDifferential(9.89, 89.9);\nexpect(chargeDifferential).equal(80.01);",
              "err": {},
              "uuid": "584480a3-f01a-4516-ab12-5308a0dc3fa3",
              "parentUUID": "20eb7c94-2c12-413b-b1a3-55153b0c8fff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify that the charge differential method returns  negative value when one of them is smaller than another one. ",
              "fullTitle": "getChargeDifferential should verify that the charge differential method returns  negative value when one of them is smaller than another one. ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chargeDifferential = getChargeDifferential(9, 18);\nexpect(chargeDifferential).equal(9);",
              "err": {},
              "uuid": "36fd8810-dff7-49ab-a9c8-8ebebfb603f7",
              "parentUUID": "20eb7c94-2c12-413b-b1a3-55153b0c8fff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify that the charge differential method returns a positive value when one of the charges is greater than another one",
              "fullTitle": "getChargeDifferential should verify that the charge differential method returns a positive value when one of the charges is greater than another one",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chargeDifferential = getChargeDifferential(18, 9);\nexpect(chargeDifferential).equal(9);",
              "err": {},
              "uuid": "584d7e98-e480-48d4-b382-61f366c8da39",
              "parentUUID": "20eb7c94-2c12-413b-b1a3-55153b0c8fff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3882ea70-d0ef-421a-ae03-fb4541d52f47",
            "0b65355f-bab5-4209-ab75-0fe8871e4ecc",
            "ec4b9b50-b503-416f-976d-d508a46ac257",
            "665d1b9c-2b9a-4ff8-a165-b483a4cd0cd3",
            "17caa0f4-934e-4b1e-b4c3-9700d129d111",
            "584480a3-f01a-4516-ab12-5308a0dc3fa3",
            "36fd8810-dff7-49ab-a9c8-8ebebfb603f7",
            "584d7e98-e480-48d4-b382-61f366c8da39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bfd87bf0-c049-45f0-b1ea-fe19ab11cc02",
          "title": "getChargeDifferentialWithLocation",
          "fullFile": "/Users/gshahin/Documents/BUS/New/mocha-chai-test/test/chargeDiff.spec.js",
          "file": "/test/chargeDiff.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return an error message for an invalid origin location",
              "fullTitle": "getChargeDifferentialWithLocation should return an error message for an invalid origin location",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = getChargeDifferential(\"Invalid Location\", \"Location B\", 70);",
              "err": {},
              "uuid": "11b2a7fb-de50-4ab3-9e34-88ab0aed4136",
              "parentUUID": "bfd87bf0-c049-45f0-b1ea-fe19ab11cc02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error message for an invalid destination location",
              "fullTitle": "getChargeDifferentialWithLocation should return an error message for an invalid destination location",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = getChargeDifferentialWithLocation(\n  \"Location A\",\n  \"Invalid Location\",\n  70\n);\nexpect(result).to.equal(\"Error: Invalid destination location\");",
              "err": {},
              "uuid": "051f42d3-492e-4dbe-a7a4-95c7176ed606",
              "parentUUID": "bfd87bf0-c049-45f0-b1ea-fe19ab11cc02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11b2a7fb-de50-4ab3-9e34-88ab0aed4136",
            "051f42d3-492e-4dbe-a7a4-95c7176ed606"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f540d3d7-edf8-49c6-b1d7-15493a81cc54",
          "title": "getChargeDifferentialWithDates",
          "fullFile": "/Users/gshahin/Documents/BUS/New/mocha-chai-test/test/chargeDiff.spec.js",
          "file": "/test/chargeDiff.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the difference in charges between two dates",
              "fullTitle": "getChargeDifferentialWithDates should return the difference in charges between two dates",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const date1 = new Date(\"2022-01-01\");\nconst date2 = new Date(\"2022-02-01\");\nconst charge1 = 100;\nconst charge2 = 200;\nconst expectedResult = 3.225806451612903;\nconst result = getChargeDifferentialWithDates(\n  date1,\n  date2,\n  charge1,\n  charge2\n);\nexpect(result).to.equal(expectedResult);",
              "err": {},
              "uuid": "2f83346c-7e34-407a-8933-f638a0481a86",
              "parentUUID": "f540d3d7-edf8-49c6-b1d7-15493a81cc54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 if the charges are the same",
              "fullTitle": "getChargeDifferentialWithDates should return 0 if the charges are the same",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const date1 = new Date(\"2022-01-01\");\nconst date2 = new Date(\"2022-02-01\");\nconst charge1 = 100;\nconst charge2 = 100;\nconst expectedResult = 0;\nconst result = getChargeDifferentialWithDates(\n  date1,\n  date2,\n  charge1,\n  charge2\n);\nexpect(result).to.equal(expectedResult);",
              "err": {},
              "uuid": "cdfb2458-879e-412f-9c90-4f1ab8e7021d",
              "parentUUID": "f540d3d7-edf8-49c6-b1d7-15493a81cc54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a negative number if the charge decreased",
              "fullTitle": "getChargeDifferentialWithDates should return a negative number if the charge decreased",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const date1 = new Date(\"2022-01-01\");\nconst date2 = new Date(\"2022-02-01\");\nconst charge1 = 200;\nconst charge2 = 100;\nconst expectedResult = -3.225806451612903;\nconst result = getChargeDifferentialWithDates(\n  date1,\n  date2,\n  charge1,\n  charge2\n);\nexpect(result).to.equal(expectedResult);",
              "err": {},
              "uuid": "e559c956-88bd-4c45-b8d0-400e5150c760",
              "parentUUID": "f540d3d7-edf8-49c6-b1d7-15493a81cc54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a positive number if the charge increased",
              "fullTitle": "getChargeDifferentialWithDates should return a positive number if the charge increased",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const date1 = new Date(\"2022-01-01\");\nconst date2 = new Date(\"2022-02-01\");\nconst charge1 = 100;\nconst charge2 = 200;\nconst expectedResult = 100;\nconst result = getChargeDifferentialWithDates(\n  date1,\n  date2,\n  charge1,\n  charge2\n);\nexpect(result).to.equal(3.225806451612903);",
              "err": {},
              "uuid": "ee30f1f9-e379-4656-8a83-c5336b229769",
              "parentUUID": "f540d3d7-edf8-49c6-b1d7-15493a81cc54",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f83346c-7e34-407a-8933-f638a0481a86",
            "cdfb2458-879e-412f-9c90-4f1ab8e7021d",
            "e559c956-88bd-4c45-b8d0-400e5150c760",
            "ee30f1f9-e379-4656-8a83-c5336b229769"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f7db6c31-2b87-46e7-ab6b-2735f039538f",
          "title": "Calculate EVCharge how much an EV should be charged or discharged  given the time of day EV type and current charge",
          "fullFile": "/Users/gshahin/Documents/BUS/New/mocha-chai-test/test/evChargedDischarged.spec.js",
          "file": "/test/evChargedDischarged.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should charge an EV with less than 50% charge to 80%",
              "fullTitle": "Calculate EVCharge how much an EV should be charged or discharged  given the time of day EV type and current charge should charge an EV with less than 50% charge to 80%",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculateEVCharge(\"any ev\", 30, \"2023-02-19T10:00:00\");\nexpect(result).to.equal(80);",
              "err": {},
              "uuid": "218ac233-ba58-4394-b56e-7874e348aed7",
              "parentUUID": "f7db6c31-2b87-46e7-ab6b-2735f039538f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should charge an EV with 50-60% charge to 70%",
              "fullTitle": "Calculate EVCharge how much an EV should be charged or discharged  given the time of day EV type and current charge should charge an EV with 50-60% charge to 70%",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculateEVCharge(\"any ev\", 55, \"2023-02-19T10:00:00\");\nexpect(result).to.equal(70);",
              "err": {},
              "uuid": "685dca19-b84e-4ea8-807a-5eda6a244776",
              "parentUUID": "f7db6c31-2b87-46e7-ab6b-2735f039538f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should discharge an EV with above 60% charge to 50%",
              "fullTitle": "Calculate EVCharge how much an EV should be charged or discharged  given the time of day EV type and current charge should discharge an EV with above 60% charge to 50%",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculateEVCharge(\"any ev\", 80, \"2023-02-19T10:00:00\");\nexpect(result).to.equal(50);",
              "err": {},
              "uuid": "43edc473-7b83-498f-94d9-41f1908a5a03",
              "parentUUID": "f7db6c31-2b87-46e7-ab6b-2735f039538f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should charge a school any ev connected before 8am to 90%",
              "fullTitle": "Calculate EVCharge how much an EV should be charged or discharged  given the time of day EV type and current charge should charge a school any ev connected before 8am to 90%",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculateEVCharge(\n  \"school-any ev\",\n  30,\n  \"2023-02-19T07:59:59\"\n);\nexpect(result).to.equal(80);",
              "err": {},
              "uuid": "858cf221-acdf-4fa4-b396-2bb7ce83772f",
              "parentUUID": "f7db6c31-2b87-46e7-ab6b-2735f039538f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should discharge a school any ev connected after 8am but before 11am and with charge above 50% to 50%",
              "fullTitle": "Calculate EVCharge how much an EV should be charged or discharged  given the time of day EV type and current charge should discharge a school any ev connected after 8am but before 11am and with charge above 50% to 50%",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculateEVCharge(\n  \"school-any ev\",\n  70,\n  \"2023-02-19T10:00:00\"\n);\nexpect(result).to.equal(50);",
              "err": {},
              "uuid": "fe9aa2e6-41ac-49dd-b44b-0b019ab92bcb",
              "parentUUID": "f7db6c31-2b87-46e7-ab6b-2735f039538f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should discharge a school any ev connected after 6pm but before 12am and with charge above 50% to 30%",
              "fullTitle": "Calculate EVCharge how much an EV should be charged or discharged  given the time of day EV type and current charge should discharge a school any ev connected after 6pm but before 12am and with charge above 50% to 30%",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculateEVCharge(\n  \"school-any ev\",\n  70,\n  \"2023-02-19T19:00:00\"\n);\nexpect(result).to.equal(50);",
              "err": {},
              "uuid": "53331c53-af0c-4ea3-abd9-7c931197fa1e",
              "parentUUID": "f7db6c31-2b87-46e7-ab6b-2735f039538f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should charge a commuter any ev connected between 3am and 7am to 95%",
              "fullTitle": "Calculate EVCharge how much an EV should be charged or discharged  given the time of day EV type and current charge should charge a commuter any ev connected between 3am and 7am to 95%",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculateEVCharge(\n  \"commuter-any ev\",\n  30,\n  \"2023-02-19T05:00:00\"\n);\nexpect(result).to.equal(80);",
              "err": {},
              "uuid": "09900cfc-6cd6-4cbd-a7f5-e8f7443d89c0",
              "parentUUID": "f7db6c31-2b87-46e7-ab6b-2735f039538f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should discharge a commuter any ev connected after 11:15pm to 30%",
              "fullTitle": "Calculate EVCharge how much an EV should be charged or discharged  given the time of day EV type and current charge should discharge a commuter any ev connected after 11:15pm to 30%",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculateEVCharge(\n  \"commuter-any ev\",\n  70,\n  \"2023-02-19T23:30:00\"\n);\nexpect(result).to.equal(50);",
              "err": {},
              "uuid": "1bea4ae4-87e4-4e3c-83cc-3ba912d942f3",
              "parentUUID": "f7db6c31-2b87-46e7-ab6b-2735f039538f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "218ac233-ba58-4394-b56e-7874e348aed7",
            "685dca19-b84e-4ea8-807a-5eda6a244776",
            "43edc473-7b83-498f-94d9-41f1908a5a03",
            "858cf221-acdf-4fa4-b396-2bb7ce83772f",
            "fe9aa2e6-41ac-49dd-b44b-0b019ab92bcb",
            "53331c53-af0c-4ea3-abd9-7c931197fa1e",
            "09900cfc-6cd6-4cbd-a7f5-e8f7443d89c0",
            "1bea4ae4-87e4-4e3c-83cc-3ba912d942f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}